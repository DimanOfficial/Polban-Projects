saya membuat grafik menggunakan CI4, didalam nya terdapat tabler grafik total data kegiatan pertahun, total data dalam tabler peserta (mahasiswa, pejabat, karyawan, umum) dan tabler penyelenggara. semua grafik berjalan dengan lancar tanpa adanya error, kecuali dengan penyelenggara, saya ingin kamu memperbaiki yang tabler penyelenggara ini, untuk tabler dan fitur fitur dalam tabler penyelenggara sudah benar, saya ingin kamu menjalankan untuk penyelenggara karyawan, karena untuk penyelenggara karyawan terus saya memilih jenis karyawan "jurusan" terus saya memilih jurusan Teknik mesin dan prodinya D3-Aeronautika (saya mengisi dengan sesuai yang ada dalam data table 'kegiatan'), setelah saya mengisi sesuai apa yang dipilih, kenapa data yang diambil jumlah nya tidak sesuai apa yang tadi saya pilih? malah data semua keseluruhan yang muncul? Jadi intinya Masalah tampaknya terletak pada logika pengambilan data untuk grafik tabler penyelenggara ketika jenis karyawan adalah "jurusan". Untuk memastikan data yang diambil sesuai dengan filter yang saya pilih (jurusan dan prodi), Saya ingin kamu memperbaiki data yang masuk kedalam grafik itu sesuai dengan apa yang saya pilih tadi dalam penyelenggara 'karyawan', Saya menggunakan PejabatController.php, TOLONG PERBAIKI HANYA DI PERMASALAHAN TABLER PENYELENGGARA DALAM JENIS KARYAWAN "JURUSAN" , TIDAK MENGGANGGU KODE YANG LAIN, 

KegiatanModel.php
 public function getJurusanByJenisKaryawan($jenisKaryawan)
    {
        $db = \Config\Database::connect();
        return $db->table('jurusan')->where('jenis_karyawan', $jenisKaryawan)->get()->getResult();
    }

    public function getProdiByJurusan($idJurusan)
    {
        $db = \Config\Database::connect();
        return $db->table('prodi')->where('id_jurusan', $idJurusan)->get()->getResult();
    }

  // Fungsi untuk mengambil rentang tahun dari kegiatan
  public function getTahunRange()
  {
      $this->select('YEAR(tanggal_mulai) as tahun');
      $this->groupBy('tahun');
      $this->orderBy('tahun', 'ASC');
      $result = $this->findAll();

      return array_column($result, 'tahun');
  }

  // Fungsi untuk mengambil data berdasarkan tahun dan filter
  public function getDataByYearAndFilter($year, $kategori, $filter)
  {
      $this->select('MONTH(tanggal_mulai) as bulan, COUNT(*) as total');
      $this->where('YEAR(tanggal_mulai)', $year);

      if ($kategori === 'peserta' && $filter) {
          $this->like('peserta', $filter); // Peserta disimpan dalam satu kolom
      } elseif ($kategori === 'penyelenggara' && $filter) {
          $this->where('jenis_penyelenggara', $filter); // Berdasarkan jenis penyelenggara
      }

      $this->groupBy('bulan');
      $this->orderBy('bulan', 'ASC');

      return $this->findAll();
  }
  public function getDataByKategoriAndYear($kategori, $tahun)
{
    $builder = $this->db->table('kegiatan');
    $builder->select('MONTH(tanggal_mulai) as bulan, COUNT(id) as total');

    // Filter tahun
    $builder->where('YEAR(tanggal_mulai)', $tahun);

    // Filter kategori
    if ($kategori === 'peserta') {
        $builder->where('kategori', 'peserta');
    } elseif ($kategori === 'penyelenggara') {
        $builder->where('kategori', 'penyelenggara');
    }

    $builder->groupBy('MONTH(tanggal_mulai)');
    return $builder->get()->getResultArray();
}
pejabat/grafik/index.php
<?= $this->extend('template/templatePejabat'); ?>

<?= $this->section('content'); ?>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Grafik Kegiatan</title>
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>

<style>
    .bx {
        max-width: 60%;
        max-height: auto;
        margin-top:50px;
    }
</style>

<div class="container mt-5">
    <h2 class="text-center">Grafik Kegiatan</h2>

    <!-- Tab Navigation -->
    <ul class="nav nav-tabs" id="myTab" role="tablist">
        <li class="nav-item" role="presentation">
            <button class="nav-link active" id="total-tab" data-bs-toggle="tab" data-bs-target="#total" type="button" role="tab" aria-controls="total" aria-selected="true">Total Kegiatan</button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link" id="peserta-tab" data-bs-toggle="tab" data-bs-target="#peserta" type="button" role="tab" aria-controls="peserta" aria-selected="false">Peserta</button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link" id="penyelenggara-tab" data-bs-toggle="tab" data-bs-target="#penyelenggara" type="button" role="tab" aria-controls="penyelenggara" aria-selected="false">Penyelenggara</button>
        </li>
    </ul>

    <!-- Tab Content -->
    <div class="tab-content mt-3" id="kategoriTabContent">
        <!-- Total Kegiatan -->
        <div class="tab-pane fade show active" id="total" role="tabpanel" aria-labelledby="total-tab">
            <form onsubmit="fetchData('total'); return false;">
                <label for="tahunTotal">Tahun:</label>
                <select id="tahunTotal" class="form-select mb-3">
                    <?php for ($i = 2020; $i <= date('Y'); $i++): ?>
                        <option value="<?= $i ?>"><?= $i ?></option>
                    <?php endfor; ?>
                </select>
                <button type="submit" class="btn btn-primary">Tampilkan</button>
            </form>
            <div class="bx">
                <canvas id="totalChart"></canvas>
            </div>
        </div>

        <!-- Peserta -->
        <div class="tab-pane fade" id="peserta" role="tabpanel" aria-labelledby="peserta-tab">
            <form onsubmit="fetchData('peserta'); return false;">
                <label for="filterPeserta">Peserta:</label>
                <select id="filterPeserta" class="form-select mb-3">
                    <option value="mahasiswa">Mahasiswa</option>
                    <option value="pejabat">Pejabat</option>
                    <option value="karyawan">Karyawan</option>
                    <option value="umum">Umum</option>
                </select>
                <label for="tahunPeserta">Tahun:</label>
                <select id="tahunPeserta" class="form-select mb-3">
                    <?php for ($i = 2020; $i <= date('Y'); $i++): ?>
                        <option value="<?= $i ?>"><?= $i ?></option>
                    <?php endfor; ?>
                </select>
                <button type="submit" class="btn btn-primary">Tampilkan</button>
            </form>
            <div class="bx">
                <canvas id="pesertaChart"></canvas>
            </div>
        </div>

        <!-- Penyelenggara -->
        <div class="tab-pane fade" id="penyelenggara" role="tabpanel" aria-labelledby="penyelenggara-tab">
            <form onsubmit="fetchData('penyelenggara'); return false;">
                <label for="penyelenggaraType">Penyelenggara:</label>
                <select id="penyelenggaraType" class="form-select mb-3" onchange="updatePenyelenggaraOptions()">
                    <option value="">-- Pilih Penyelenggara --</option>
                    <option value="mahasiswa">Mahasiswa</option>
                    <option value="direktur">Karyawan</option>
                </select>

                <!-- Dropdown Dinamis -->
                <div id="dynamicOptions" class="mb-3"></div>

                <label for="tahunPenyelenggara">Tahun:</label>
                <select id="tahunPenyelenggara" class="form-select mb-3">
                    <?php for ($i = 2020; $i <= date('Y'); $i++): ?>
                        <option value="<?= $i ?>"><?= $i ?></option>
                    <?php endfor; ?>
                </select>
                <button type="submit" class="btn btn-primary">Tampilkan</button>
            </form>
            <div class="bx">
                <canvas id="penyelenggaraChart"></canvas>
            </div>
        </div>
    </div>
</div>

<!-- Bootstrap JS -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
async function fetchData(type) {
    try {
        const year = document.getElementById(tahun${capitalize(type)}).value;
        let filter = '';

        if (type === 'penyelenggara') {
            const penyelenggaraType = document.getElementById('penyelenggaraType').value;
            if (penyelenggaraType === 'mahasiswa') {
                const kategoriMahasiswa = document.getElementById('kategoriMahasiswa')?.value;
                if (kategoriMahasiswa === 'jurusan') {
                    filter = document.getElementById('jurusan')?.value || 'showAllJurusan';
                } else if (kategoriMahasiswa === 'prodi') {
                    filter = document.getElementById('prodi')?.value || 'showAllProdi';
                } else {
                    filter = 'showAllMahasiswa';
                }
            } else if (penyelenggaraType === 'direktur') {
                filter = document.getElementById('unit')?.value || 'showAllUnit';
            }
        } else {
            filter = document.getElementById(filter${capitalize(type)})?.value || '';
        }

        const response = await fetch('/dashboard/getChartData', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ chartType: type, tahun: year, filter }),
        });

        const data = await response.json();
        if (data.status !== 'success') {
            throw new Error(data.message || 'Gagal memuat data.');
        }

        updateChart(type, data.data);
    } catch (error) {
        console.error('Error fetching data:', error.message);
        alert('Terjadi kesalahan saat memuat data.');
    }
}

function updateChart(type, data) {
    const chartId = ${type}Chart;
    const ctx = document.getElementById(chartId).getContext('2d');

    // Hapus chart lama jika ada
    if (Chart.getChart(chartId)) {
        Chart.getChart(chartId).destroy();
    }

    const labels = [
        'Januari', 'Februari', 'Maret', 'April', 'Mei', 'Juni',
        'Juli', 'Agustus', 'September', 'Oktober', 'November', 'Desember'
    ];

    const backgroundColors = [
        'rgba(255, 99, 132, 0.7)', 'rgba(54, 162, 235, 0.7)', 'rgba(255, 206, 86, 0.7)',
        'rgba(75, 192, 192, 0.7)', 'rgba(153, 102, 255, 0.7)', 'rgba(255, 159, 64, 0.7)',
        'rgba(199, 199, 199, 0.7)', 'rgba(83, 102, 255, 0.7)', 'rgba(255, 99, 71, 0.7)',
        'rgba(60, 179, 113, 0.7)', 'rgba(147, 112, 219, 0.7)', 'rgba(220, 20, 60, 0.7)'
    ];

    // Data default untuk 12 bulan
    let values = Array(12).fill(0);
    data.forEach(item => {
        const month = parseInt(item.bulan, 10) - 1; // Ubah bulan ke indeks array (0-11)
        values[month] = item.total;
    });

    let chartConfig;

    if (type === 'total' || type === 'peserta') {
        chartConfig = {
            type: type === 'total' ? 'bar' : 'line',
            data: {
                labels,
                datasets: [{
                    label: Kegiatan ${capitalize(type)},
                    data: values,
                    backgroundColor: type === 'total' ? backgroundColors : undefined,
                    borderColor: type === 'peserta' ? backgroundColors : undefined,
                    borderWidth: 1,
                    tension: 0.4,
                    fill: false,
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: {
                        display: true,
                        position: 'right',
                    },
                    tooltip: {
                        callbacks: {
                            label: (context) => ${context.label}: ${context.raw},
                        }
                    }
                },
                scales: {
                    y: { beginAtZero: true },
                    x: { beginAtZero: true }
                }
            }
        };
    } else if (type === 'penyelenggara') {
        const labels = data.map(item => item.nama);
        const values = data.map(item => item.total);
        const backgroundColors = [
            'rgba(255, 99, 132, 0.2)', 'rgba(54, 162, 235, 0.2)', 'rgba(255, 206, 86, 0.2)',
            'rgba(75, 192, 192, 0.2)', 'rgba(153, 102, 255, 0.2)', 'rgba(255, 159, 64, 0.2)',
            'rgba(199, 199, 199, 0.2)', 'rgba(83, 102, 255, 0.2)', 'rgba(255, 99, 71, 0.2)',
            'rgba(60, 179, 113, 0.2)', 'rgba(147, 112, 219, 0.2)', 'rgba(220, 20, 60, 0.2)'
        ];

        chartConfig = {
            type: 'pie',
            data: {
                labels,
                datasets: [{
                    label: Kegiatan ${capitalize(type)},
                    data: values,
                    backgroundColor: backgroundColors,
                    borderWidth: 1,
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: {
                        display: true,
                        position: 'right',
                    },
                    tooltip: {
                        callbacks: {
                            label: (context) => ${context.label}: total kegiatan ${context.raw}
                        }
                    }
                }
            }
        };
    }

    // Buat grafik baru
    new Chart(ctx, chartConfig);
}

function capitalize(str) {
    return str.charAt(0).toUpperCase() + str.slice(1);
}

function updatePenyelenggaraOptions() {
    const penyelenggaraType = document.getElementById('penyelenggaraType').value;
    const dynamicOptions = document.getElementById('dynamicOptions');
    dynamicOptions.innerHTML = '';

    if (penyelenggaraType === 'mahasiswa') {
        dynamicOptions.innerHTML = `
            <label for="kategoriMahasiswa">Kategori:</label>
            <select id="kategoriMahasiswa" class="form-select mb-3" onchange="updateMahasiswaOptions()">
                <option value="">-- Pilih --</option>
                <option value="jurusan">Jurusan</option>
                <option value="prodi">Prodi</option>
                <option value="showAllMahasiswa">Show All Mahasiswa</option>
            </select>
            <div id="mahasiswaOptions" class="mb-3"></div>
        `;
    } else if (penyelenggaraType === 'direktur') {
        dynamicOptions.innerHTML = `
            <label for="unit">Unit:</label>
            <select id="unit" class="form-select mb-3">
                <option value="">-- Pilih Unit --</option>
                <?php foreach ($units as $unit): ?>
                    <option value="<?= $unit['id_unit'] ?>"><?= $unit['nama_unit'] ?></option>
                <?php endforeach; ?>
                <option value="showAllUnit">Show All Unit</option>
            </select>
        `;
    }
}

function updateMahasiswaOptions() {
    const kategoriMahasiswa = document.getElementById('kategoriMahasiswa').value;
    const mahasiswaOptions = document.getElementById('mahasiswaOptions');
    mahasiswaOptions.innerHTML = '';

    if (kategoriMahasiswa === 'jurusan') {
        mahasiswaOptions.innerHTML = `
            <label for="jurusan">Jurusan:</label>
            <select id="jurusan" class="form-select mb-3">
                <option value="">-- Pilih Jurusan --</option>
                <?php foreach ($jurusans as $jurusan): ?>
                    <option value="<?= $jurusan['id_jurusan'] ?>"><?= $jurusan['nama_jurusan'] ?></option>
                <?php endforeach; ?>
                <option value="showAllJurusan">Show All Jurusan</option>
            </select>
        `;
    } else if (kategoriMahasiswa === 'prodi') {
        mahasiswaOptions.innerHTML = `
            <label for="prodi">Prodi:</label>
            <select id="prodi" class="form-select mb-3">
                <option value="">-- Pilih Prodi --</option>
                <?php foreach ($prodis as $prodi): ?>
                    <option value="<?= $prodi['id_prodi'] ?>"><?= $prodi['nama_prodi'] ?></option>
                <?php endforeach; ?>
                <option value="showAllProdi">Show All Prodi</option>
            </select>
        `;
    }
}
</script>


</body>
</html>

<?= $this->endSection(); ?>

PejabatController.php
 public function filterGrafik()
{
    $tahun = $this->request->getGet('tahun') ?? date('Y'); // Default ke tahun sekarang
    $bulan = $this->request->getGet('bulan') ?? null; // Biarkan null jika tidak diberikan

    $data = $this->KegiatanModel->getKegiatanByMonth($tahun, $bulan);

    return $this->response->setJSON([
        'labels' => array_map(fn($week) => 'Minggu ' . $week, array_column($data, 'minggu')),
        'kegiatan' => array_column($data, 'jumlah_kegiatan')
    ]);
}
public function index4()
    {
    if (session()->get('role') !== 'Pejabat') {
        return view('errors/403');
    }
    
    $userId = session()->get('id_users');
    $user = $this->profilAdminModel->getUserById($userId);

    $jurusanModel = new JurusanModel();
    $prodiModel = new ProdiModel();
    $unitModel = new UnitModel();

    $tahun = $this->request->getVar('tahun') ?? date('Y');
    $kategori = $this->request->getVar('kategori') ?? 'total';
    $filterValue = $this->request->getVar('filter') ?? null;

    $data['tahun'] = $tahun;
    $data['kategori'] = $kategori;
    $data['filter'] = $filterValue;

    $data['units'] = $this->KegiatanModel->getUnitNames();
    $data['jurusans'] = $this->KegiatanModel->getJurusanNames();
    $data['prodis'] = $this->KegiatanModel->getProdiNames();
    $data['user'] = $user;

    if ($kategori === 'total') {
        $kegiatan = $this->KegiatanModel
                        ->select('id_kegiatan, penyelenggara, id_jurusan, id_prodi, id_unit, tanggal_mulai')
                        ->getKegiatanByYear($tahun);
    } else {
        $filterKey = ($kategori === 'peserta') ? 'peserta' : 'penyelenggara';
        $kegiatan = $filterValue 
                    ? $this->KegiatanModel
                          ->select('id_kegiatan, penyelenggara, id_jurusan, id_prodi, id_unit, tanggal_mulai')
                          ->getKegiatanByFilter($tahun, $filterKey, $filterValue) 
                    : [];
    }

    $data['kegiatanPerBulan'] = array_fill(0, 12, 0);
    $penyelenggaraCount = ['mahasiswa' => 0, 'karyawan' => 0];

    foreach ($kegiatan as $item) {
        if (!empty($item['tanggal_mulai'])) {
            $month = date('n', strtotime($item['tanggal_mulai'])) - 1;
            $data['kegiatanPerBulan'][$month] += 1;
        }

        if (isset($item['penyelenggara'])) {
            $penyelenggara = strtolower($item['penyelenggara']);

            if ($penyelenggara === 'mahasiswa') {
                if (!empty($item['id_jurusan']) || !empty($item['id_prodi'])) {
                    $penyelenggaraCount['mahasiswa']++;
                }
            } elseif ($penyelenggara === 'karyawan') {
                if (!empty($item['id_unit'])) {
                    $penyelenggaraCount['karyawan']++;
                }
            }
        }
    }

    $data['penyelenggaraCount'] = $penyelenggaraCount;

    return view('pejabat/grafik/index', $data);
}

public function getChartData()
{
    if (session()->get('role') !== 'Pejabat') {
        return view('errors/403');
    }

    $input = $this->request->getJSON();
    $chartType = $input->chartType ?? '';
    $tahun = $input->tahun ?? '';
    $filter = $input->filter ?? '';

    if (empty($chartType) || empty($tahun)) {
        return $this->response->setJSON([
            'status' => 'error',
            'message' => 'Parameter tidak valid.',
        ]);
    }

    $data = [];
    if ($chartType === 'total') {
        $data = $this->Kegi